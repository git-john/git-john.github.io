<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码农人生</title>
  
  <subtitle>技术博客，随笔，技术沉淀总结</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.readytran.com/"/>
  <updated>2019-03-26T16:06:46.942Z</updated>
  <id>http://blog.readytran.com/</id>
  
  <author>
    <name>John KANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis实战读书笔记</title>
    <link href="http://blog.readytran.com/2019/03/26/redis%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.readytran.com/2019/03/26/redis实战读书笔记/</id>
    <published>2019-03-26T07:38:26.000Z</published>
    <updated>2019-03-26T16:06:46.942Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>redis数据结构</p><p>  redis数据结构有以下几种：</p><ul><li>string: 表示的是一个可变的字节数组，内部结构实现类似于java的arraylist，采用预分配冗余空间来减少内存的频繁分配。当字符串长度大于1M的时候，扩容的时候固定多扩容1M， 而小于1M的时候每次都是按双倍来扩容。最大只能存放512M.</li><li>list：双向链表， 首尾插入时性能高， 但是随机读写效率不高</li><li>set：无序集合</li><li>sorted set：有序集合。底层实现通过一个hash和一个跳跃表来维护。hash用来关联value和score，跳跃列表用来给元素value排序，按score的范围获取元素列表</li><li>hash</li><li>bitmap</li></ul></li><li>数据持久化<ul><li>redis有两种数据持久化： RDB与AOF</li><li>RDB: 根据配置的策略实现当N秒内改动次数达到x次，即持久化到硬盘。可以配置多种策略以便达到最佳效果。</li><li>AOF: 对每个操作日志持久化，还原的时候按操作日志进行还原。文件相比rdb大，性能要低。可以配置三种模式：always，every second，no（由操作系统决定什么时候持久化）</li></ul></li><li>内存管理与数据淘汰机制<ul><li>默认情况下，在 32 位 OS 中，Redis 最大使用 3GB 的内存，在 64 位 OS 中则没有限制</li><li>设置maxmemory,当内存占用达到了maxmemory的时候，向redis写入数据，redis会对内存进行调整：<ul><li>按照数据淘汰策略淘汰数据，释放空间</li><li>如果没有数据可以淘汰，会对写请求报错，但是读请求不受影响</li></ul></li><li>redis提供了5种数据淘汰策略：<ul><li>volatile-lru：使用 LRU 算法进行数据淘汰（淘汰上次使用时间最早的，且使用次数最少的 Key），只淘汰设定了有效期的 Key。</li><li>allkeys-lru：使用 LRU 算法进行数据淘汰，所有的 Key 都可以被淘汰</li><li>volatile-random：随机淘汰数据，只淘汰设定了有效期的 Key。</li><li>allkeys-random：随机淘汰数据，所有的 Key 都可以被淘汰。</li><li>volatile-ttl：淘汰剩余有效期最短的 Key。</li></ul></li></ul></li></ul><pre><code>配置方法：  maxmemory-policy volatile-lru </code></pre><ul><li><p>pipelining</p><p>  实现在一次交互中执行多条命令，适用于批量命令（mset/mget）无法顾及到的地方</p></li><li><p>事务与scripting</p><p>  Redis 的事务可以确保复数命令执行时的原子性，可以使用multi，exec来达到事务的目的。执行multi时，开启事务，此时命令只是被放入执行队列，并不执行，执行exec命令的时候才会执行所有的命令。redis事务不支持回滚。</p></li><li>redis性能调优</li><li>主从复制与集群分片</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;redis数据结构&lt;/p&gt;
&lt;p&gt;  redis数据结构有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string: 表示的是一个可变的字节数组，内部结构实现类似于java的arraylist，采用预分配冗余空间来减少内存的频繁分配。当字符串长度大于1M的时候，
      
    
    </summary>
    
    
      <category term="redis" scheme="http://blog.readytran.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis分布式锁</title>
    <link href="http://blog.readytran.com/2019/03/26/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://blog.readytran.com/2019/03/26/redis分布式锁/</id>
    <published>2019-03-26T06:03:34.000Z</published>
    <updated>2019-03-26T06:33:59.498Z</updated>
    
    <content type="html"><![CDATA[<p>分布式锁一般有三种实现方式：1. 数据库乐观锁；2. 基于Redis的分布式锁；3. 基于ZooKeeper的分布式锁</p><p><strong>为什么用redis分布式锁，怎么用呢？</strong></p><ul><li><p>为什么？</p><ul><li>使用redis锁，主要是为了解决分布式部署环境下多进程对资源的操作不会导致脏读脏写。redis锁相比数据库的性能要好，因为是在内存中操作</li></ul></li><li><p>怎么用？</p><ul><li>加锁的时候往redis里面写入一个key-value， 当其他线程进入这段代码时候发现key已经存在的时候就需要等待key被释放</li><li>解锁的时候判断是否为锁的拥有者，如果是，则删除key。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取分布式锁的工具类， 下面的第二个链接讲了错误示例， 在第一个里面出现。 可见看别人的文章需要去分析。</span><br><span class="line"> * https://juejin.im/entry/5a502ac2518825732b19a595</span><br><span class="line"> * https://juejin.im/entry/59f7bbde5188252946502fed</span><br><span class="line"> */</span><br><span class="line">public class RedisLockTool &#123;</span><br><span class="line">    private static final String LOCK_SUCCESS = &quot;OK&quot;;</span><br><span class="line">    private static final Long RELEASE_SUCCESS = 1L;</span><br><span class="line">    private static final String SET_IF_NOT_EXIST = &quot;NX&quot;;</span><br><span class="line">    private static final String SET_WITH_EXPIRE_TIME = &quot;PX&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 尝试获取分布式锁</span><br><span class="line">     *</span><br><span class="line">     * @param jedis      Redis客户端</span><br><span class="line">     * @param lockKey    锁</span><br><span class="line">     * @param requestId  请求标识</span><br><span class="line">     * @param expireTime 超期时间</span><br><span class="line">     * @return 是否获取成功</span><br><span class="line">     */</span><br><span class="line">    public static boolean tryGetDistributedLock(Jedis jedis, String lockKey, String requestId, int expireTime) &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 1. lockKey, 互斥信号,谁能往redis设置这个key即为获取到锁</span><br><span class="line">         * 2. requestid，线程id，可以使用uuid来生成，标识锁的拥有者</span><br><span class="line">         * 3. NX：不存在即set，存在则不处理</span><br><span class="line">         * 4. PX: 锁的超时时间</span><br><span class="line">         */</span><br><span class="line">        String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line"></span><br><span class="line">        if (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 释放分布式锁</span><br><span class="line">     * @param jedis Redis客户端</span><br><span class="line">     * @param lockKey 锁</span><br><span class="line">     * @param requestId 请求标识</span><br><span class="line">     * @return 是否释放成功</span><br><span class="line">     */</span><br><span class="line">    public static boolean releaseDistributedLock(Jedis jedis, String lockKey, String requestId) &#123;</span><br><span class="line">        String script = &quot;if redis.call(&apos;get&apos;, KEYS[1]) == ARGV[1] then return redis.call(&apos;del&apos;, KEYS[1]) else return 0 end&quot;;</span><br><span class="line">        //使用eval， 将命令交给redis服务器处理，eval可以保证原子性</span><br><span class="line">        Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line"></span><br><span class="line">        if (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分布式锁一般有三种实现方式：1. 数据库乐观锁；2. 基于Redis的分布式锁；3. 基于ZooKeeper的分布式锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么用redis分布式锁，怎么用呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.readytran.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>一次丢人的面试</title>
    <link href="http://blog.readytran.com/2019/03/25/%E9%9D%A2%E8%AF%951/"/>
    <id>http://blog.readytran.com/2019/03/25/面试1/</id>
    <published>2019-03-25T06:48:51.000Z</published>
    <updated>2019-03-25T07:41:34.502Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码查阅" />    <label for="pass">请输入密码查阅</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      不公开
    
    </summary>
    
    
      <category term="interview" scheme="http://blog.readytran.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>不公开</title>
    <link href="http://blog.readytran.com/2019/03/22/resume/"/>
    <id>http://blog.readytran.com/2019/03/22/resume/</id>
    <published>2019-03-22T12:59:07.000Z</published>
    <updated>2019-03-23T14:52:37.945Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码查阅" />    <label for="pass">请输入密码查阅</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      不公开
    
    </summary>
    
    
      <category term="interview" scheme="http://blog.readytran.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>不公开</title>
    <link href="http://blog.readytran.com/2019/03/21/interview/"/>
    <id>http://blog.readytran.com/2019/03/21/interview/</id>
    <published>2019-03-21T12:59:07.000Z</published>
    <updated>2019-03-26T16:28:45.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拷问： 自我介绍</p></blockquote><p>我叫康强， 08年毕业于江西财经大学信息与计算科学专业。至今为止有10多年的开发经验，我做过很多项目，最近今年主要在江南影视传媒有限公司工作，负责公司的游戏后台服务平台的开发，包括接口平台，运营数据分析平台，推广网站系统，工作期间我主导重写了运营数据分析平台，重构了接口服务平台，整合了推广网站系统，使得公司的运营效率，游戏性能都得到了大大的提高，赢得了公司的领导以及同事的称赞。<br><a id="more"></a></p><blockquote><p>拷问： hashmap实现原理</p></blockquote><p>hashmap是数组+链表+红黑树（jdk1.8,链表长度大于8时转链表为红黑树）实现的。<br>hashmap如何存储： 1. 获取key的hashcode， 作为数组的下标，在下标中存储键值对（内部类Node对象）。当hash发生碰撞时， 会形成一个链表或者红黑树来存储。</p><blockquote><p>线程的实现方式</p><ol><li>通过继承Thread创建线程</li><li>通过实现runnable接口</li><li>通过callable与future创建线程</li></ol></blockquote><p> 1）创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</p><p>（2）创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</p><p>（3）使用FutureTask对象作为Thread对象的target创建并启动新线程。</p><p>（4）调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package com.thread;</span><br><span class="line"> </span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line"> </span><br><span class="line">public class CallableThreadTest implements Callable&lt;Integer&gt;</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args)</span><br><span class="line">&#123;</span><br><span class="line">CallableThreadTest ctt = new CallableThreadTest();</span><br><span class="line">FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(ctt);</span><br><span class="line">for(int i = 0;i &lt; 100;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot; 的循环变量i的值&quot;+i);</span><br><span class="line">if(i==20)</span><br><span class="line">&#123;</span><br><span class="line">new Thread(ft,&quot;有返回值的线程&quot;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;子线程的返回值：&quot;+ft.get());</span><br><span class="line">&#125; catch (InterruptedException e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (ExecutionException e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line">public Integer call() throws Exception</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line">for(;i&lt;100;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot; &quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">return i;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>transient</p></blockquote><blockquote><p>拷问： 谈谈你对jvm的理解</p><ul><li>jvm的组成部分及其作用：<ul><li>主要由四部分组成：<strong>类加载器+运行时数据区+指令引擎+本地接口库</strong>。作用是java执行的一个串行流程，首先类加载器需要将java编译文件class加载到内存中，这个内存就是java运行时数据区，接下来执行引擎会将字节码翻译成系统指令交由CPU执行，这个执行过程需要调用其他语言写的本地接口。这就是他们的作用。</li></ul></li><li>jvm运行时数据区的理解：<ul><li>jvm运行时数据区包括5个部分：<strong>程序计数器（program counter register）+java虚拟机栈+本地方法栈+java堆+方法区</strong>。</li><li>程序计数器是线程私有的一块内存空间，记录正在执行的虚拟机字节码指令的地址。分支，循环，跳转，线程恢复时，需要根据这个记录值完成操作。</li><li>java虚拟机栈也是线程私有的一块空间，主要用来记录局部变量（基本类型值或者应用类型的指针），方法参数，方法调用，返回值</li><li>本地方法栈也是线程私有的一块空间，和java虚拟机栈类似，不过服务的对象是本地方法</li><li>java堆：线程共享的一块比较大的内存，是java虚拟机中最大的一块内存，里面主要用来存放对象实例</li><li>方法区：用来存储类信息，常量，静态变量，即时编译后的代码等数据</li></ul></li><li>jvm堆与栈的区别：<ul><li>1.栈内存存储的是基本类型和指针，而堆内存存储的是实例；</li><li>2.栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；</li><li>3.栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。</li></ul></li><li>队列和栈是什么？有什么区别？<ul><li>队列是两头都通的，所以先进先出</li><li>栈是底部不通，所以后进先出</li></ul></li><li>什么是双亲委派模型？<ul><li>类加载器从上到下有这几种类型：启动类加载器-》扩展类加载器-》应用程序加载器-》系统（应用）类加载器-》自定义的类加载器。每个类加载器都有父类加载器这样的层级关系，这个模型就是双亲委派模型。</li></ul></li><li>新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？<ul><li>新生代收集器：<ul><li>serial（串行）收集器，由虚拟机后台发起，stop the world，只留一个线程来进行垃圾收集，基于复制算法</li><li>parnew收集器，serial收集器的多线程版本</li><li>Parallel Scavenge 收集器： 没看懂，控制吞吐量的收集器</li></ul></li><li>老年代收集器：<ul><li>serial old收集器：单线程收集器，采用标记-整理算法。</li><li>Parallel Old收集器： 没看懂，后面接着研究</li><li>CMS收集器：获取<strong>最短回收停顿时间</strong>为目标,基于<strong>标记-清除算法</strong>实现. 1. 标记GC roots能直接关联到的对象，需要stw。2.并发标记，GC ROOTS tracing。 3.重新标记，需要stw，修复在第二步并发标记期间的变动 4. 进行并发清除</li></ul></li></ul></li><li>分代垃圾回收器是怎么工作的<ul><li>由于不同对象的生命周期不一样， 因此将他们进行分代管理有利于提供垃圾回收的效率。</li><li>分为三代：轻轻代，年老代，持久代。持久代主要存放java的类信息，与垃圾回收关系不大。<ul><li>年轻代： 分为eden区和两个suvivor区， eden空间不足时会触发minor gc。minor gc时，会清除eden区的非存活对象， 将还存活对象复制到其中一个survivor区，如果这个区满了的话，之前该区的存活对象复制到另外一个区，如果另外一个区也满了，就将这些对象放到老年代去。</li><li>年老代： 经历了多次垃圾回收，仍然存活的对象， 将会被放到年老代。年老代的垃圾回收为full gc。在持久代，年老代被写满的时候会触发，调用system.gc也会触发。</li></ul></li></ul></li></ul></blockquote><blockquote><p>拷问： 谈谈你对tcp/ip协议的理解</p></blockquote><blockquote><p>拷问： 谈谈并发编程，谈谈线程安全</p></blockquote><blockquote><p>拷问： 怎么对系统进行调优<br>jvm参数配置<br>操作系统配置</p></blockquote><blockquote><p>拷问： 你了解dubbo或者springcloud吗，用过吗？<br>怎么才能伪装成做过呢。。</p></blockquote><blockquote><p>分布式架构知识体系</p><ul><li>强一致性ACID: 单机环境下的要求<ul><li>Atomicity原子性：要么全部完成，要么全都不执行</li><li>Consistency一致性：事务开始前和结束后，数据库的完整性不被破坏</li><li>Isolation隔离性：允许多个事务并发对数据进行处理</li><li>Durabilit持久性：事务结束后，数据就保存下来了，重启机器也不丢失</li></ul></li></ul></blockquote><ul><li><p>分布式一致性CAP</p><blockquote><p>分布式计算系统不可能同时确保一致性（Consistency）、可用性（Availablity）和分区容忍性（Partition）</p></blockquote></li><li><p>弱一致性BASE</p><blockquote><p>多数情况下，其实我们也并非一定要求强一致性，部分业务可以容忍一定程度的延迟一致，所以为了兼顾效率，发展出来了最终一致性理论BASE，BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）</p></blockquote></li></ul><blockquote><p>用过hessian的理解<br>编写hessian服务，并注册到总线。 客户端调用请求时，总线分发请求到对应的service。手机端是采用xmpp协议与总线进行通讯，总线接着分发请求到各自服务。</p></blockquote><blockquote><p>jdk代理与动态代理</p></blockquote><blockquote><p>redis，ehcache</p></blockquote><blockquote><p>你的项目中用到了哪些设计模式</p><ul><li>工厂模式：对用户的充值渠道进行包装，当充值请求进来时，根据渠道类型，获取对应的充值bean</li><li>单例模式：对配置文件（如省市联动配置）用单例来实现，可以减少内存重复存放，增加获取数据的时间响应速度</li><li>包装器模式： <ul><li>对响应结果进行统一封装，规范化响应消息为code，message，data模式。</li><li>对mybatis常用基础方法进行抽象封装</li></ul></li></ul></blockquote><blockquote><p>使用线程池创建线程的好处</p></blockquote><p>可以减少创建与销毁线程耗费的时间和系统资源开销。 因为线程池的线程可以复用，会主动去任务队列取任务进行执行。</p><blockquote><p>springboot, spring cloud, springmvc</p></blockquote><p>springboot启动流程：<br>    spring boot 初始化内容还是很多的，但是总结起来就四点： <em> 创建SpringApplication实例，判定环境，是web环境还是普通环境。加载所有需要用到的Initializers和Listeners，这里使用约定大于配置的理念揭开了自动配置的面纱。 </em> 加载环境变量，环境变量包括system environment、classpath environment、application environment（也就是我们自定义的application.properties配置文件） <em> 创建SpringApplicationRunListeners </em> 创建ApplicationContext，设置装配context，在这里将所有的bean进行扫描最后在refreshContext的时候进行加载、注入。最终将装配好的context作为属性设置进SpringApplicationRunListeners，这就完成了一个spring boot项目的启动</p><p><a href="https://blog.csdn.net/sinat_35512245" target="_blank" rel="noopener">https://blog.csdn.net/sinat_35512245</a><br><a href="https://blog.csdn.net/belalds/article/details/81193846" target="_blank" rel="noopener">https://blog.csdn.net/belalds/article/details/81193846</a><br><a href="http://youzhixueyuan.com/ali-java-architects-interview-128-questions-with-answers.html" target="_blank" rel="noopener">http://youzhixueyuan.com/ali-java-architects-interview-128-questions-with-answers.html</a><br><a href="https://www.zhihu.com/question/55622227" target="_blank" rel="noopener">https://www.zhihu.com/question/55622227</a><br><a href="https://www.jianshu.com/p/15eeb3985240" target="_blank" rel="noopener">https://www.jianshu.com/p/15eeb3985240</a><br><a href="http://www.importnew.com/16545.html" target="_blank" rel="noopener">http://www.importnew.com/16545.html</a><br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html</a><br><a href="https://blog.csdn.net/v_july_v/article/details/6105630" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v/article/details/6105630</a></p><hr><p>今天是2019-03-26， 昨天的面试已经以失败告终，原因还是自己准备不足，不会引导面试官到我准备好的领域。 另外一个就是最近几年java的代码写的太少了，生疏了，所以不能很好的发挥出来。 我始终相信，我是一个有能力架构好一个系统的人，只是以往的自己不够勤奋，平台不能给我机会与时间去学习新技术，完善技术。那么接下来应该怎么做呢？首先当然还是要准备周五的面试， 周五的面试要考察linux，有机试，要考察分布式，io，多线程，还有sql。 而我虽然以往都用过， 但是没有总结，也很久没写过java代码， 所以任务还是繁重的。那么我要做的就是搜集机试题目，并复习好。 写一些多线程的，io的代码。搜集linux面试题目。分布式事务准备，缓存准备，消息准备。sql调优面试准备。。。天呐，只有两天时间要做这么多事情。</p><p>接下来，就是需要将bootdo与clouddo整合一遍，为面试也为自己的技能提升做一个实战性的演练。</p><h2 id="加油吧。。。"><a href="#加油吧。。。" class="headerlink" title="加油吧。。。"></a>加油吧。。。</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;拷问： 自我介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我叫康强， 08年毕业于江西财经大学信息与计算科学专业。至今为止有10多年的开发经验，我做过很多项目，最近今年主要在江南影视传媒有限公司工作，负责公司的游戏后台服务平台的开发，包括接口平台，运营数据分析平台，推广网站系统，工作期间我主导重写了运营数据分析平台，重构了接口服务平台，整合了推广网站系统，使得公司的运营效率，游戏性能都得到了大大的提高，赢得了公司的领导以及同事的称赞。&lt;br&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://blog.readytran.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>读书</title>
    <link href="http://blog.readytran.com/2019/03/21/%E8%AF%BB%E4%B9%A6/"/>
    <id>http://blog.readytran.com/2019/03/21/读书/</id>
    <published>2019-03-21T09:33:12.000Z</published>
    <updated>2019-03-26T16:12:08.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h1><p>已读的书</p><blockquote><p>《曾国藩传》</p></blockquote><p>读后感： 以前学习历史的时候，对曾国藩可以说是相当鄙视的，被太平天国打的几次要跳水自杀。读完这本书发现，他比左宗棠还伟大。他本身并不聪明，记忆力很差（比我差远了），身体也不行。但是他一直在致力于做圣人的目标， 为了达成这样的目标，他想尽办法，每天都读书，写日志反省自己。 他提出尚拙的理念，其实就是要自己将基础夯实。很认可他的书要一本一本的读，读完一本再去读下一本的理念。 看完后给自己立下目标，不再想尽办法去搜集下载书，将计划要读的书读好了再去读下一本书，让自己不再浮躁。博客要坚持写下去， 让自己学会思考，而不是一直在接受别人的想法中。 学习曾国藩的为人信条： 不因谄媚而去夸奖，因为那会让你的夸奖显得廉价，让别人对你的夸奖不在乎，如果我每次都是发自内心的夸奖，那么我的夸奖就会让人觉得很开心。<br><a id="more"></a></p><blockquote><p>《sed与awk》</p></blockquote><p>偏实操的书，读到后面，难度有点大，走马观花的读完没有去验证，等以后补上吧。 </p><blockquote><p>redis实战<br>对redis有了一定了解，后面的部分没读完， 改从公众号推文上面看了，有时间再重新读一次并实际演练</p></blockquote><p>计划读的书</p><blockquote><p>《人类简史》</p></blockquote><blockquote><p>《人月神话》</p></blockquote><blockquote><p>《深入理解jvm虚拟机》</p></blockquote><blockquote><p>《spring内幕》</p></blockquote><blockquote><p>《阿里java开发手册》</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2019&quot;&gt;&lt;a href=&quot;#2019&quot; class=&quot;headerlink&quot; title=&quot;2019&quot;&gt;&lt;/a&gt;2019&lt;/h1&gt;&lt;p&gt;已读的书&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《曾国藩传》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读后感： 以前学习历史的时候，对曾国藩可以说是相当鄙视的，被太平天国打的几次要跳水自杀。读完这本书发现，他比左宗棠还伟大。他本身并不聪明，记忆力很差（比我差远了），身体也不行。但是他一直在致力于做圣人的目标， 为了达成这样的目标，他想尽办法，每天都读书，写日志反省自己。 他提出尚拙的理念，其实就是要自己将基础夯实。很认可他的书要一本一本的读，读完一本再去读下一本的理念。 看完后给自己立下目标，不再想尽办法去搜集下载书，将计划要读的书读好了再去读下一本书，让自己不再浮躁。博客要坚持写下去， 让自己学会思考，而不是一直在接受别人的想法中。 学习曾国藩的为人信条： 不因谄媚而去夸奖，因为那会让你的夸奖显得廉价，让别人对你的夸奖不在乎，如果我每次都是发自内心的夸奖，那么我的夸奖就会让人觉得很开心。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://blog.readytran.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于并发</title>
    <link href="http://blog.readytran.com/2019/03/21/%E5%85%B3%E4%BA%8E%E5%B9%B6%E5%8F%91/"/>
    <id>http://blog.readytran.com/2019/03/21/关于并发/</id>
    <published>2019-03-21T03:48:53.000Z</published>
    <updated>2019-03-21T03:51:48.660Z</updated>
    
    <content type="html"><![CDATA[<p>我的并发有多少， 每个请求20ms左右。 那么我的平均响应时间=0.02， qps=50，两台服务器，就是一秒有100qps。<br>我能支撑的并发是多少呢，一个小时的并发支撑能力为 100*3600=36w.那么我的系统就是百万级别的并发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的并发有多少， 每个请求20ms左右。 那么我的平均响应时间=0.02， qps=50，两台服务器，就是一秒有100qps。&lt;br&gt;我能支撑的并发是多少呢，一个小时的并发支撑能力为 100*3600=36w.那么我的系统就是百万级别的并发。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="架构" scheme="http://blog.readytran.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>awk与sed读书笔记</title>
    <link href="http://blog.readytran.com/2019/03/15/awk%E4%B8%8Esed%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.readytran.com/2019/03/15/awk与sed读书笔记/</id>
    <published>2019-03-15T08:49:21.000Z</published>
    <updated>2019-03-21T16:02:25.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是awk，sed"><a href="#什么是awk，sed" class="headerlink" title="什么是awk，sed"></a>什么是awk，sed</h1><ul><li>sed是一个面向字符流的编辑器</li><li>awk是模式匹配的程序设计语言</li></ul><a id="more"></a><p>#能做什么</p><ul><li>sed</li></ul><ol><li>在一个或多个文件上自动实现编辑操作</li><li>简化对多个文件执行相同的编辑处理工作</li><li>编写转换程序</li></ol><ul><li>awk</li></ul><ol><li>更容易处理多个数据流</li><li>定义函数</li><li>使用字符串和算术操作符</li><li>处理unix命令结果</li></ol><p>#怎么做</p><blockquote><p>示例文本内容</p></blockquote><p>list<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">John Daggett, 341 King Road, Plymouth MA</span><br><span class="line"></span><br><span class="line">Alice Ford, 22 EAST Broadway, Richmond VA</span><br><span class="line"></span><br><span class="line">Orville Thomas, 11345 Oak Bridge Road, Tulsa OK</span><br><span class="line"></span><br><span class="line">Terry Kalkas, 402 Lans Road, Beaver Falls PA</span><br><span class="line"></span><br><span class="line">Eric Adams, 20 Post Road, Sudbury MA</span><br><span class="line"></span><br><span class="line">Hubert Sims, 328A Brook Road, Roanoke VA</span><br><span class="line"></span><br><span class="line">Amy Wilde, 334 Bayshore Pkwy, Mountain View CA</span><br><span class="line"></span><br><span class="line">Sal Carpenter, 73 6th Street, Boston MA</span><br></pre></td></tr></table></figure></p><p>namestate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s/MA/,massachsetts/</span><br><span class="line">s/CA/,california/</span><br><span class="line">s/OK/,OkLaHema/</span><br><span class="line">s/PA/,Penssyvalian/</span><br></pre></td></tr></table></figure></p><ul><li>sed用法示例，更多用法使用<code>sed --help</code>查看</li></ul><p>使用命令执行匹配与替换，多个命令用分号隔开: <code>sed -e &#39;s/MA/mmmaaa/;s/VA/vvvaaa/&#39; list</code></p><p>对list文件执行命令脚本: <code>sed -f script list</code></p><p>阻止自动输出每个输入行，使用-n（要生成输出的地方，需要带上打印命令P）: <code>sed -n &#39;s/MA/mmaaa/p&#39; list</code></p><ul><li>awk用法示例</li></ul><p>查询包含MA的行： <code>awk &#39;/MA/&#39; list</code></p><p>查询第一个单词（分隔符默认为空格）： <code>awk &#39;print ${1}&#39; list</code></p><p>查询包含MA的行，并打印第一个单词： <code>awk &#39;/MA/{print $1}&#39; list</code></p><p>将单词分隔符指定为逗号并查询包含MA的行，并打印第一个单词：<code>awk -F, &#39;/MA/{print $1}&#39; list</code></p><ul><li>同时使用sed与awk示例：</li></ul><p>查询满足namestate文件规则的行，分隔符指定为逗号，第四个单词：<code>sed -f namestate list | awk -F, &#39;{print $4}&#39;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是awk，sed&quot;&gt;&lt;a href=&quot;#什么是awk，sed&quot; class=&quot;headerlink&quot; title=&quot;什么是awk，sed&quot;&gt;&lt;/a&gt;什么是awk，sed&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;sed是一个面向字符流的编辑器&lt;/li&gt;
&lt;li&gt;awk是模式匹配的程序设计语言&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>docker笔记</title>
    <link href="http://blog.readytran.com/2019/03/11/docker%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.readytran.com/2019/03/11/docker笔记/</id>
    <published>2019-03-11T07:11:56.000Z</published>
    <updated>2019-03-21T16:02:35.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>开源应用容器引擎。开发人员可以打包应用以及依赖包到这样一个容器中，然后发布到任意的linux主机系统。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>基于go语言开发，基于linux的cgroup，namespace以及AUFS类的union FS技术对进程进行隔离。最初实现是基于linux的LXC容器，后来转为自己研发的containerd和runC<br><a id="more"></a></p><h3 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构</h3><p>docker使用C/S架构模式，通过api来管理docker容器。</p><ul><li>docker镜像：创建docker容器的模板</li><li>docker容器：独立运行的一个或者一组应用</li><li>docker client：用于调用docker api的命令行工具或者其他工具</li><li>docker主机：物理或虚拟的主机，用来运行docker守护进程或者docker容器</li><li>docker仓库：用于存放docker镜像的仓库</li><li>docker machine：安装与配置docker的工具，主要作用是在多主机情况下一个个的去安装比较麻烦，用docker-machine可以远程管理安装配置公章</li></ul><p><img src="../asset/img/docker-system.png" alt="hexo image"></p><h3 id="centos7安装"><a href="#centos7安装" class="headerlink" title="centos7安装"></a>centos7安装</h3><h4 id="检查内核版本"><a href="#检查内核版本" class="headerlink" title="检查内核版本"></a>检查内核版本</h4><p>检查linux内核版本是否满足，需要3.10以上的内核版本才能安装docker。</p><blockquote><p>uname -r</p></blockquote><h4 id="移除旧版本"><a href="#移除旧版本" class="headerlink" title="移除旧版本"></a>移除旧版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>安装系统依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>添加软件源</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="3"><li>更新yum缓存</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure><ol start="4"><li>安装docker-ce（社区版）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure><ol start="5"><li>启动docker</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><ol start="6"><li>测试运行hello world</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><ol start="7"><li>镜像加速</li></ol><p>由于国内网络连接国外网络比较慢，因此需要配置加速器，加速地址使用163的仓库地址。 编辑  /etc/docker/daemon.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="docker资源"><a href="#docker资源" class="headerlink" title="docker资源"></a>docker资源</h3><h4 id="Docker官方英文资源"><a href="#Docker官方英文资源" class="headerlink" title="Docker官方英文资源"></a>Docker官方英文资源</h4><ul><li>docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a></li><li></li><li>Docker Windows 入门：<a href="https://docs.docker.com/docker-for-windows/" target="_blank" rel="noopener">https://docs.docker.com/docker-for-windows/</a></li><li></li><li>Docker CE(社区版) Ubuntu：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></li><li>Docker mac 入门：<a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="noopener">https://docs.docker.com/docker-for-mac/</a></li><li>Docker 用户指引：<a href="https://docs.docker.com/config/daemon/" target="_blank" rel="noopener">https://docs.docker.com/config/daemon/</a></li><li>Docker 官方博客：<a href="http://blog.docker.com/" target="_blank" rel="noopener">http://blog.docker.com/</a></li><li>Docker Hub: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></li><li>Docker开源： <a href="https://www.docker.com/open-source" target="_blank" rel="noopener">https://www.docker.com/open-source</a></li></ul><h4 id="Docker中文资源"><a href="#Docker中文资源" class="headerlink" title="Docker中文资源"></a>Docker中文资源</h4><ul><li>Docker中文网站：<a href="https://www.docker-cn.com/" target="_blank" rel="noopener">https://www.docker-cn.com/</a></li><li>Docker安装手册：<a href="https://docs.docker-cn.com/engine/installation/" target="_blank" rel="noopener">https://docs.docker-cn.com/engine/installation/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h3&gt;&lt;p&gt;开源应用容器引擎。开发人员可以打包应用以及依赖包到这样一个容器中，然后发布到任意的linux主机系统。&lt;/p&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h3&gt;&lt;p&gt;基于go语言开发，基于linux的cgroup，namespace以及AUFS类的union FS技术对进程进行隔离。最初实现是基于linux的LXC容器，后来转为自己研发的containerd和runC&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>iptables</title>
    <link href="http://blog.readytran.com/2019/03/11/iptables/"/>
    <id>http://blog.readytran.com/2019/03/11/iptables/</id>
    <published>2019-03-11T01:55:31.000Z</published>
    <updated>2019-03-21T16:04:13.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>公司的防攻击策略主要是通过iptables进行数据包转发，将真实服务器隐藏在一堆非业务主机后面，这样服务器被攻击的时候，只需要更换服务器ip，将被攻击的服务器丢入废弃池就好，而不需要重新搭建部署服务器。示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iptables -A PREROUTING -t nat -i eth1 -p tcp --dport 3030 -j DNAT --to 10.51.18.147:3030 </span><br><span class="line">iptables -t nat -A POSTROUTING -d 10.51.18.147 -p tcp --dport 3030 -j MASQUERADE</span><br><span class="line">iptables -A PREROUTING -t nat -i eth1 -p tcp --dport 3309 -j DNAT --to 10.51.18.147:3309</span><br><span class="line">iptables -t nat -A POSTROUTING -d 10.51.18.147 -p tcp --dport 3309 -j MASQUERADE</span><br><span class="line">iptables -A PREROUTING -t nat -i eth1 -p tcp --dport 3310 -j DNAT --to 10.51.18.147:3310</span><br><span class="line">iptables -t nat -A POSTROUTING -d 10.51.18.147 -p tcp --dport 3310 -j MASQUERADE</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="iptables详解"><a href="#iptables详解" class="headerlink" title="iptables详解"></a>iptables详解</h1><h2 id="iptables基础"><a href="#iptables基础" class="headerlink" title="iptables基础"></a>iptables基础</h2><p>iptables规则为预定义的条件，当数据包包头符合条件时候，按规则来处理数据包。规则存储在内核空间信息包过滤表中。这些规则分别指定了源地址，目标地址，传输协议（tcp,udp,icmp等）和服务类型（如http，ftp，smtp等）当数据包与规则匹配时候，iptables根据规则定义的方法处理（accept，reject，drop）</p><h2 id="iptables和netfilter的关系"><a href="#iptables和netfilter的关系" class="headerlink" title="iptables和netfilter的关系"></a>iptables和netfilter的关系</h2><p>iptables只是防火墙的管理工具，netfilter是功能实现</p><h2 id="iptables传输数据包过程"><a href="#iptables传输数据包过程" class="headerlink" title="iptables传输数据包过程"></a>iptables传输数据包过程</h2><ol><li>当一个数据包进入网卡时，首先进入prerouting，内核根据数据包目的IP判断是否要转发出去</li><li>如果数据包是进入本机的，就会向下走，进入input链，这个时候所有进程都可以收到数据包。本机进程发送数据时会进入output链，进入postrouting链输出</li><li>如果数据包是要转发出去，数据包就会如图向右移动，进入forward链，到达postrouting链输出</li></ol><p><img src="../asset/img/iptables.png" alt="hexo image"></p><p>参考链接：<br><a href="https://www.jianshu.com/p/ee4ee15d3658" target="_blank" rel="noopener">https://www.jianshu.com/p/ee4ee15d3658</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;公司的防攻击策略主要是通过iptables进行数据包转发，将真实服务器隐藏在一堆非业务主机后面，这样服务器被攻击的时候，只需要更换服务器ip，将被攻击的服务器丢入废弃池就好，而不需要重新搭建部署服务器。示例代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;iptables -A PREROUTING -t nat -i eth1 -p tcp --dport 3030 -j DNAT --to 10.51.18.147:3030 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -d 10.51.18.147 -p tcp --dport 3030 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A PREROUTING -t nat -i eth1 -p tcp --dport 3309 -j DNAT --to 10.51.18.147:3309&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -d 10.51.18.147 -p tcp --dport 3309 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -A PREROUTING -t nat -i eth1 -p tcp --dport 3310 -j DNAT --to 10.51.18.147:3310&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iptables -t nat -A POSTROUTING -d 10.51.18.147 -p tcp --dport 3310 -j MASQUERADE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>理解redis字符串类型</title>
    <link href="http://blog.readytran.com/2019/03/05/%E7%90%86%E8%A7%A3redis%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"/>
    <id>http://blog.readytran.com/2019/03/05/理解redis字符串类型/</id>
    <published>2019-03-05T02:19:59.000Z</published>
    <updated>2019-03-11T08:12:52.948Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5b6b88e5e51d45191d7a4a13" target="_blank" rel="noopener">https://juejin.im/post/5b6b88e5e51d45191d7a4a13</a><br><a href="https://segmentfault.com/a/1190000014397497" target="_blank" rel="noopener">https://segmentfault.com/a/1190000014397497</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5b6b88e5e51d45191d7a4a13&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5b6b88e5e51d45191d7a4a13&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解java垃圾回收</title>
    <link href="http://blog.readytran.com/2019/03/03/%E7%90%86%E8%A7%A3java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://blog.readytran.com/2019/03/03/理解java垃圾回收/</id>
    <published>2019-03-03T02:17:26.000Z</published>
    <updated>2019-03-21T09:55:32.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><p>java垃圾回收一直是各大面试官重点考察对象，如果连java垃圾回收都不理解的话， 是不能称为懂Java的。我虽然工作这么多年，也了解java垃圾回收，但是由于平时调优工作少，也不能很流畅的叙述出来。 这篇笔记通过查阅资料，以实操的方式来理解java内存回收机制。</p><h1 id="常用调优操作"><a href="#常用调优操作" class="headerlink" title="常用调优操作"></a>常用调优操作</h1><p>#相关术语</p><ul><li>CMS垃圾收集算法</li><li>ParNew垃圾收集算法</li><li>minorGC</li><li>fullGC</li><li>老年代</li><li>新生代</li><li>eden</li><li>survivor</li><li>stop the world</li></ul><hr><ul><li><a href="https://segmentfault.com/a/1190000004233812" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004233812</a></li><li><a href="https://blog.csdn.net/wh211212/article/details/80437696" target="_blank" rel="noopener">https://blog.csdn.net/wh211212/article/details/80437696</a></li><li><a href="https://segmentfault.com/a/1190000004233812" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004233812</a></li><li><a href="https://mp.weixin.qq.com/s/MCp16GDT0T0IVwRas6oNcA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/MCp16GDT0T0IVwRas6oNcA</a></li><li><a href="https://blog.51cto.com/andrewli/2130346" target="_blank" rel="noopener">https://blog.51cto.com/andrewli/2130346</a></li><li><a href="https://segmentfault.com/a/1190000010844969" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010844969</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我的理解&quot;&gt;&lt;a href=&quot;#我的理解&quot; class=&quot;headerlink&quot; title=&quot;我的理解&quot;&gt;&lt;/a&gt;我的理解&lt;/h1&gt;&lt;p&gt;java垃圾回收一直是各大面试官重点考察对象，如果连java垃圾回收都不理解的话， 是不能称为懂Java的。我虽然工作这么多
      
    
    </summary>
    
    
      <category term="java" scheme="http://blog.readytran.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>江影工作总结</title>
    <link href="http://blog.readytran.com/2019/03/01/%E6%B1%9F%E5%BD%B1%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.readytran.com/2019/03/01/江影工作总结/</id>
    <published>2019-03-01T08:15:37.000Z</published>
    <updated>2019-03-23T14:54:54.569Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入密码查阅" />    <label for="pass">请输入密码查阅</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      不公开
    
    </summary>
    
    
      <category term="生活" scheme="http://blog.readytran.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>ios开发者帐号</title>
    <link href="http://blog.readytran.com/2019/02/28/ios%E5%BC%80%E5%8F%91%E8%80%85%E5%B8%90%E5%8F%B7/"/>
    <id>http://blog.readytran.com/2019/02/28/ios开发者帐号/</id>
    <published>2019-02-28T08:40:37.000Z</published>
    <updated>2019-03-22T03:51:58.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Certificates，Identifiers-amp-Profiles"><a href="#Certificates，Identifiers-amp-Profiles" class="headerlink" title="Certificates，Identifiers &amp; Profiles"></a>Certificates，Identifiers &amp; Profiles</h3><p>对于刚学ios开发的人来说，最先需要掌握的就是苹果开发的Certificates，Identifiers &amp; Profiles.<a id="more"></a><br><img src="../asset/img/ios_developer.png" alt="hexo image"></p><h4 id="Certificates"><a href="#Certificates" class="headerlink" title="Certificates"></a>Certificates</h4><p>这就是证书，需要从mac上生成后上传到开发平台,生成方法：</p><blockquote><p>钥匙串访问 -&gt; 证书助理 -&gt; 从证书颁发机构请求证书… -&gt; 保存到本地</p></blockquote><p>这个证书生成后会有一个文件，上传到developer后台。 如果其他电脑上需要用到这个证书，需要从生成证书的mac导出证书，目的是为了将私钥导过来。</p><h4 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h4><p>生成appid， ios应用app的全球唯一标识符。在xcode工程中为工程的bundleid。</p><h4 id="Profiles"><a href="#Profiles" class="headerlink" title="Profiles"></a>Profiles</h4><p>这货就是描述文件了，每个app对应一个开发者描述文件和发布版本描述文件。 生成描述文件的时候，如果开发者帐号为企业版本，选择in-house，商城包选择 store。 描述文件对应的证书可以是相同的. 所以证书一般只生成一个开发者证书，一个发布证书即可啦</p><hr><p>以上为我的个人使用总结，如需要了解原理，了解更多，网上资料大把可以参考如下链接（写完后觉得写的浅显后搜索的）<br><a href="https://www.cnblogs.com/xiaofeixiang/p/4564585.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaofeixiang/p/4564585.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Certificates，Identifiers-amp-Profiles&quot;&gt;&lt;a href=&quot;#Certificates，Identifiers-amp-Profiles&quot; class=&quot;headerlink&quot; title=&quot;Certificates，Identifiers &amp;amp; Profiles&quot;&gt;&lt;/a&gt;Certificates，Identifiers &amp;amp; Profiles&lt;/h3&gt;&lt;p&gt;对于刚学ios开发的人来说，最先需要掌握的就是苹果开发的Certificates，Identifiers &amp;amp; Profiles.
    
    </summary>
    
    
      <category term="ios" scheme="http://blog.readytran.com/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>三次握手四次挥手</title>
    <link href="http://blog.readytran.com/2019/02/28/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://blog.readytran.com/2019/02/28/三次握手四次挥手/</id>
    <published>2019-02-28T08:35:49.000Z</published>
    <updated>2019-02-28T09:28:55.570Z</updated>
    
    <content type="html"><![CDATA[<p>常用查询linux服务器性能的一个命令，查询服务器请求连接状态，这个命令会列出请求的状态以及对应的请求个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n | awk &apos;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&apos;</span><br></pre></td></tr></table></figure><ul><li>TIME_WAIT 28 #表示主动关闭，通过优化系统内核参数可容易解决</li><li>CLOSE_WAIT 1 #表示被动关闭，需要从程序本身出发</li><li>ESTABLISHED 30 #表示正在通信</li></ul><hr><blockquote><p>要了解这个命令产生的结果，需要了解tcp的三次握手，四次挥手. 三次握手是为了建立连接，四次挥手是为了断开连接<br><a id="more"></a></p></blockquote><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ol><li>client端发送请求报文：syn=1,seq=client_sn</li><li>Server接收到请求报文后进行第一次握手并进行资源分配，回复报文：syn=1，seq=server_sn,ack=client_sn+1</li><li>客户端收到server的回复后，进行第二次握手并进行资源分配，回复：syn=0，seq=client_sn+1,ack=server_sn+1</li><li>Server收到客户端的ack报文后为第三次握手，表示连接成功建立</li></ol><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>断开连接，可以是服务器断开，也可以是客户端断开。<br>客户端主动断开连接的情况如下：</p><ol><li>客户端发送fin,进入fin_wait状态，表示：客户端没有数据要发给server，请求关闭 （第一次挥手）</li><li>服务端收到fin后，发送ack，说：请求已收到，我还没准备好，请等待。此时连接状态在服务器端为close_wait状态，（第二次挥手） 而客户端进入FIN_wait2状态。</li><li>服务器确认准备好了以后，发送fin给客户端，表示：准备好关闭。（第三次挥手）</li><li>客户端收到FIN后，发送ack给服务端，自身进入time_wait状态。如果server没有收到ack则可以重传 （第四次挥手）</li><li>服务端收到ack后，知道可以关闭，不再回复消息</li><li>客户端等待2MSL后，确认没有收到消息，把连接中断<br><img src="/asset/img/client_1.png" alt="hexo image"><br><img src="/asset/img/server_1.png" alt="hexo image"></li></ol><hr><p>看了上面的情况，大概知道这几个状态的数据是怎么形成的了，以下是解决方案：</p><blockquote><p>通过修改/etc/sysctl.conf文件，服务器能够快速回收和重用TIME_WAIT 的资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies = 1  #表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭         </span><br><span class="line">net.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭  </span><br><span class="line">net.ipv4.tcp_tw_recycle = 1  #表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭    </span><br><span class="line">net.ipv4.tcp_fin_timeout=30 #表示如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间</span><br></pre></td></tr></table></figure><blockquote><p>导致 CLOSE_WAIT 大量存在的原因：就是在对方关闭连接之后服务器程序自己没有进一步发出 ACK 信号。换句话说，就是在对方连接关闭之后，程序里没有检测到，或者程序压根就忘记了这个时候需要关闭连接，于是这个资源就一直被程序占着；服务器对于程序抢占的资源没有主动回收的权利，除非终止程序运行。</p></blockquote><p>解决方案：代码需要判断 socket ，一旦读到 0，断开连接，read 返回负，检查一下 errno，如果不是 AGAIN，就断开连接。<br>所以解决 CLOSE_WAIT 大量存在的方法还是从自身的代码出发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用查询linux服务器性能的一个命令，查询服务器请求连接状态，这个命令会列出请求的状态以及对应的请求个数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat -n | awk &amp;apos;/^tcp/ &amp;#123;++S[$NF]&amp;#125; END &amp;#123;for(a in S) print a, S[a]&amp;#125;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;TIME_WAIT 28 #表示主动关闭，通过优化系统内核参数可容易解决&lt;/li&gt;
&lt;li&gt;CLOSE_WAIT 1 #表示被动关闭，需要从程序本身出发&lt;/li&gt;
&lt;li&gt;ESTABLISHED 30 #表示正在通信&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;要了解这个命令产生的结果，需要了解tcp的三次握手，四次挥手. 三次握手是为了建立连接，四次挥手是为了断开连接&lt;br&gt;
    
    </summary>
    
    
      <category term="tcp" scheme="http://blog.readytran.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>lsyncd多目录同步</title>
    <link href="http://blog.readytran.com/2019/02/19/lsyncd%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.readytran.com/2019/02/19/lsyncd安装与配置/</id>
    <published>2019-02-19T08:02:38.000Z</published>
    <updated>2019-02-19T09:15:25.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装lsyncd"><a href="#安装lsyncd" class="headerlink" title="安装lsyncd"></a>安装lsyncd</h3><blockquote><p>lsyncd即Live Syncing Daemon，它是开源的数据实时同步工具(后台进程)，基于Linux2.6.3以后的inotify机制和rsync，安装方法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lsyncd lua lua-devel</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="lsyncd设置"><a href="#lsyncd设置" class="headerlink" title="lsyncd设置"></a>lsyncd设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">-- global setting</span><br><span class="line">---------------------------------------------------------------------------------settings</span><br><span class="line"></span><br><span class="line">settings&#123;</span><br><span class="line">        logfile         = &quot;/data/var/log/lsyncd/lsyncd.log&quot;,</span><br><span class="line">        statusFile      = &quot;/data/var/log/lsyncd/lsyncd.status&quot;,</span><br><span class="line">        inotifyMode     = &quot;CloseWrite&quot;,</span><br><span class="line">        maxProcesses    = 7</span><br><span class="line">        -- nodaemon     =true,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------settings</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------define</span><br><span class="line">-- host list，要同步的服务器列表</span><br><span class="line">servers = &#123;</span><br><span class="line">    &quot;xx.xx.xx.xx&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-- directory list </span><br><span class="line">dirpath = &#123;</span><br><span class="line">&quot;/data/www&quot;,</span><br><span class="line">&quot;/data/cmd&quot;,</span><br><span class="line">&quot;/data/local/tomcat8/conf&quot;,</span><br><span class="line">&quot;/data/local/nginx/conf&quot;,</span><br><span class="line">&quot;/etc/rsyslog.d&quot;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------define</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------action</span><br><span class="line">for _, srvip in ipairs(servers) do</span><br><span class="line">for _, dir in ipairs(dirpath) do</span><br><span class="line"></span><br><span class="line">sync &#123;</span><br><span class="line">    default.rsync,</span><br><span class="line">    source= dir,</span><br><span class="line">    target= &quot;webguest@&quot;..srvip..&quot;:&quot;..dir,</span><br><span class="line">    maxDelays= 5,</span><br><span class="line">    delay= 30,</span><br><span class="line">    exclude= &#123;&quot;*.tmp&quot;,&quot;Catalina&quot;&#125;,</span><br><span class="line">    rsync= &#123;</span><br><span class="line">binary          = &quot;/usr/bin/rsync&quot;,</span><br><span class="line">archive         = true,</span><br><span class="line">compress        = true,</span><br><span class="line">-- bwlimit         = 2000,</span><br><span class="line">rsh             = &quot;/usr/bin/ssh -p 10062 -o StrictHostKeyChecking=no -l webguest -i /home/webguest/.ssh/id_rsa_slb&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">---------------------------------------------------------------------------------action</span><br></pre></td></tr></table></figure><blockquote><p>以上实现的是通过shell脚本循环逻辑来做多目录的同步， 也可以简单的使用多个sync配置多个目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">sync &#123;</span><br><span class="line">    default.rsync,</span><br><span class="line">    source= /data/www/xxdir,</span><br><span class="line">    target= &quot;webguest@xx.xx.xx.xx:/data/www/xxdir,</span><br><span class="line">    maxDelays= 5,</span><br><span class="line">    delay= 30,</span><br><span class="line">    exclude= &#123;&quot;*.tmp&quot;,&quot;Catalina&quot;&#125;,</span><br><span class="line">    rsync= &#123;</span><br><span class="line">binary          = &quot;/usr/bin/rsync&quot;,</span><br><span class="line">archive         = true,</span><br><span class="line">compress        = true,</span><br><span class="line">-- bwlimit         = 2000,</span><br><span class="line">rsh             = &quot;/usr/bin/ssh -p 10062 -o StrictHostKeyChecking=no -l webguest -i id_rsa&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sync &#123;</span><br><span class="line">    default.rsync,</span><br><span class="line">    source= /data/www/xxdir2,</span><br><span class="line">    target= &quot;webguest@xx.xx.xx.xx:/data/www/xxdir2,</span><br><span class="line">    maxDelays= 5,</span><br><span class="line">    delay= 30,</span><br><span class="line">    exclude= &#123;&quot;*.tmp&quot;,&quot;Catalina&quot;&#125;,</span><br><span class="line">    rsync= &#123;</span><br><span class="line">binary          = &quot;/usr/bin/rsync&quot;,</span><br><span class="line">archive         = true,</span><br><span class="line">compress        = true,</span><br><span class="line">-- bwlimit         = 2000,</span><br><span class="line">rsh             = &quot;/usr/bin/ssh -p 10062 -o StrictHostKeyChecking=no -l webguest -i id_rsa&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://klionsec.github.io/2017/11/18/lsyncd/#menu" target="_blank" rel="noopener">https://klionsec.github.io/2017/11/18/lsyncd/#menu</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装lsyncd&quot;&gt;&lt;a href=&quot;#安装lsyncd&quot; class=&quot;headerlink&quot; title=&quot;安装lsyncd&quot;&gt;&lt;/a&gt;安装lsyncd&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;lsyncd即Live Syncing Daemon，它是开源的数据实时同步工具(后台进程)，基于Linux2.6.3以后的inotify机制和rsync，安装方法如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y lsyncd lua lua-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mac,xcode快捷键大全</title>
    <link href="http://blog.readytran.com/2019/02/19/mac-xcode%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>http://blog.readytran.com/2019/02/19/mac-xcode快捷键大全/</id>
    <published>2019-02-19T07:49:35.000Z</published>
    <updated>2019-02-19T07:57:52.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mac文本操作"><a href="#mac文本操作" class="headerlink" title="mac文本操作"></a>mac文本操作</h3><ul><li>delete 向后删除</li><li>Fn+delete 向前删除</li><li>撤销： Command-z</li><li>回退：shift+command+z</li><li>剪切：command + x</li><li>copy：command + c</li><li>粘贴：command + v</li><li>全选：command + a</li><li>保存：command + s</li><li>查找：command + f<a id="more"></a></li><li>截取选中区域并保存到文件：command + shift + 4</li><li>截取全部屏幕并保存到文件：command + shift + 3</li><li>截取全部屏幕到剪贴板： command + shift + control + 3</li><li>打开强制退出窗口：command + option + esc</li><li>fn-上箭头 向上滚动一页（Page Up）</li><li>fn-下箭头 向下滚动一页（Page Down）　　</li><li>fn-左箭头 滚动至文稿开头（Home）　　</li><li>fn-右箭头 滚动至文稿末尾（End）　　</li><li>Command-右箭头 将光标移至当前行的行尾　　</li><li>Command-左箭头 将光标移至当前行的行首　　</li><li>Command-下箭头 将光标移至文稿末尾　　</li><li>Command-上箭头 将光标移至文稿开头　　</li><li>Option-右箭头 将光标移至下一个单词的末尾　　</li><li>Option-左箭头 将光标移至上一个单词的开头　　</li><li>Control-A 移至行或段落的开头</li></ul><h4 id="在Finder中："><a href="#在Finder中：" class="headerlink" title="在Finder中："></a>在Finder中：</h4><ul><li>Command-Option-V 剪切文件　　</li><li>Command-Shift-N 新建文件夹（New）　　　</li><li>Command-上箭头 打开包含当前文件夹的文件夹，相当于Windows里的“向上”　　</li><li>Command-Delete 将文件移至废纸篓　　</li><li>Command-Shift-Delete 清倒废纸篓　　</li><li>空格键 快速查看选中的文件，也就是预览功能</li></ul><h3 id="xcode调试"><a href="#xcode调试" class="headerlink" title="xcode调试"></a>xcode调试</h3><ul><li>运行与停止<blockquote><p>运行：command + r. 停止： command</p></blockquote></li><li>调试<blockquote><p>F6单步调试 | F7进入方法 | F8继续</p></blockquote></li></ul><h3 id="mac键盘符号图例"><a href="#mac键盘符号图例" class="headerlink" title="mac键盘符号图例"></a>mac键盘符号图例</h3><p><img src="../asset/img/mac_keyboard.jpg" alt="hexo image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;mac文本操作&quot;&gt;&lt;a href=&quot;#mac文本操作&quot; class=&quot;headerlink&quot; title=&quot;mac文本操作&quot;&gt;&lt;/a&gt;mac文本操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;delete 向后删除&lt;/li&gt;
&lt;li&gt;Fn+delete 向前删除&lt;/li&gt;
&lt;li&gt;撤销： Command-z&lt;/li&gt;
&lt;li&gt;回退：shift+command+z&lt;/li&gt;
&lt;li&gt;剪切：command + x&lt;/li&gt;
&lt;li&gt;copy：command + c&lt;/li&gt;
&lt;li&gt;粘贴：command + v&lt;/li&gt;
&lt;li&gt;全选：command + a&lt;/li&gt;
&lt;li&gt;保存：command + s&lt;/li&gt;
&lt;li&gt;查找：command + f
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
      <category term="工具" scheme="http://blog.readytran.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://blog.readytran.com/2019/02/18/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.readytran.com/2019/02/18/git常用命令/</id>
    <published>2019-02-18T09:01:31.000Z</published>
    <updated>2019-03-22T03:56:38.387Z</updated>
    
    <content type="html"><![CDATA[<ol><li>查看当前没有add 的内容修改</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ol start="2"><li>查看已经add，没有commit的改动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="3"><li>查看当前没有add，没有commit的改动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff head </span><br><span class="line">或者 </span><br><span class="line">git status</span><br></pre></td></tr></table></figure><ol start="4"><li>查看任意两个版本之间的改动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 版本号码1 版本号码2</span><br></pre></td></tr></table></figure><ol start="5"><li>比较两个版本号码的src 文件夹的差异</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 版本号码1 版本号码2  src</span><br></pre></td></tr></table></figure><ol start="6"><li>删除git上的文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm test.txt</span><br></pre></td></tr></table></figure><blockquote><p>如果误删了本地test.txt想要从版本库还原到本地</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --test.txt</span><br></pre></td></tr></table></figure><ol start="7"><li>查看git历史提交（commit）记录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">加上 --pretty=online 参数可以使得信息更简洁</span><br><span class="line">即：git log --pretty=online</span><br></pre></td></tr></table></figure><ol start="8"><li>版本穿梭</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. git reset --hard HEAD^</span><br><span class="line">git中当前版本用HEAD表示，^表示上一个版本。</span><br><span class="line">两个^^表示上上个版本，往上100个版本，就是100个^，</span><br><span class="line">也可以写成HEAD~100.也可以直接使用提交的commitid来回穿梭。</span><br><span class="line">2. git reflog查看命令历史. git log查看提交历史</span><br><span class="line">3. git log查看提交历史</span><br><span class="line">4.git diff 比较的是工作区文件与暂存区文件的区别（上次git add 的内容）</span><br><span class="line">5.git diff --cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别</span><br></pre></td></tr></table></figure><ol start="9"><li>.ignorefile添加忽略文件</li></ol><blockquote><p>添加相关文件（夹）路径到.ignorefile.  对已经track过的文件，需要将其从暂存区删除。执行代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;commit&quot;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h2><hr><h4 id="git-pull-vs-git-fetch-vs-git-remote-update"><a href="#git-pull-vs-git-fetch-vs-git-remote-update" class="headerlink" title="git pull vs git fetch vs git remote update"></a>git pull vs git fetch vs git remote update</h4><hr><ul><li>git remote update will update all of your branches set to track remote ones, but not merge any changes in.</li><li>git fetch will update only the branch you’re on, but not merge any changes in.</li><li>git pull will update and merge any remote changes of the current branch you’re on. This would be the one you use to update a local branch.</li></ul><h2 id="Command-line-instructions"><a href="#Command-line-instructions" class="headerlink" title="Command line instructions"></a>Command line instructions</h2><ul><li>Git global setup</li><li>git config –global user.name “康强”</li><li>git config –global user.email “<a href="mailto:kangqiang@k3k.com" target="_blank" rel="noopener">kangqiang@k3k.com</a>“</li></ul><h3 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h3><ul><li>git clone ssh:<a href="mailto://git@gd.k3k.com" target="_blank" rel="noopener">//git@gd.k3k.com</a>:13303/kangqiang/ios_aihaoquan.git</li><li>cd ios_aihaoquan</li><li>touch README.md</li><li>git add README.md</li><li>git commit -m “add README”</li><li>git push -u origin master</li></ul><h3 id="Existing-folder"><a href="#Existing-folder" class="headerlink" title="Existing folder"></a>Existing folder</h3><ul><li>cd existing_folder</li><li>git init</li><li>git remote add origin ssh:<a href="mailto://git@gd.k3k.com" target="_blank" rel="noopener">//git@gd.k3k.com</a>:13303/kangqiang/ios_aihaoquan.git</li><li>git add .</li><li>git commit -m “Initial commit”</li><li>git push -u origin master</li></ul><h3 id="Existing-Git-repository"><a href="#Existing-Git-repository" class="headerlink" title="Existing Git repository"></a>Existing Git repository</h3><ul><li>cd existing_repo</li><li>git remote rename origin old-origin</li><li>git remote add origin ssh:<a href="mailto://git@gd.k3k.com" target="_blank" rel="noopener">//git@gd.k3k.com</a>:13303/kangqiang/ios_aihaoquan.git</li><li>git push -u origin –all</li><li>git push -u origin –tags</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.kancloud.cn/xiak/github/218507" target="_blank" rel="noopener">https://www.kancloud.cn/xiak/github/218507</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li><li><a href="https://learngitbranching.js.org/?demo" target="_blank" rel="noopener">https://learngitbranching.js.org/?demo</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;查看当前没有add 的内容修改&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;查看已经add，没有commit的改动&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff --cached&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.readytran.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>定时任务检测进程</title>
    <link href="http://blog.readytran.com/2019/02/18/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A3%80%E6%B5%8B%E8%BF%9B%E7%A8%8B/"/>
    <id>http://blog.readytran.com/2019/02/18/定时任务检测进程/</id>
    <published>2019-02-18T08:59:18.000Z</published>
    <updated>2019-02-18T08:59:57.387Z</updated>
    
    <content type="html"><![CDATA[<h6 id="php网站总是无法访问，重启php-fpm进程后可以访问。"><a href="#php网站总是无法访问，重启php-fpm进程后可以访问。" class="headerlink" title="php网站总是无法访问，重启php-fpm进程后可以访问。"></a><p>php网站总是无法访问，重启php-fpm进程后可以访问。</p></h6><p>为了避免麻烦,写了个守护进程监控，当发现端口无法telnet后，杀掉进程重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#check php-fpm server up/down</span><br><span class="line">TelLog=/home/xcguest/telphp.log</span><br><span class="line">/usr/bin/telnet 127.0.0.1 9000 &lt;&lt; ! &gt; $TelLog</span><br><span class="line">quit</span><br><span class="line">!</span><br><span class="line">SOK=`cat $TelLog | grep &quot;Escape character&quot; |wc -l`</span><br><span class="line">if [ $SOK -eq 1 ];then</span><br><span class="line">  echo &quot;php-fpm is ok&quot;</span><br><span class="line">else</span><br><span class="line">  killall -9 php-fpm</span><br><span class="line">  sleep 1</span><br><span class="line">  /usr/local/php/sbin/php-fpm</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><ol><li>保存为php_monitor.sh后；</li><li>执行chmod +x 使得脚本拥有执行权限。</li><li>执行crontab -e， 添加定时脚本每分钟检查一次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * /home/xcguest/php_check.sh</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;php网站总是无法访问，重启php-fpm进程后可以访问。&quot;&gt;&lt;a href=&quot;#php网站总是无法访问，重启php-fpm进程后可以访问。&quot; class=&quot;headerlink&quot; title=&quot;php网站总是无法访问，重启php-fpm进程后可以访问。&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
      <category term="工具" scheme="http://blog.readytran.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="http://blog.readytran.com/2019/02/18/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://blog.readytran.com/2019/02/18/科学上网/</id>
    <published>2019-02-18T08:37:10.000Z</published>
    <updated>2019-02-18T08:43:58.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>centos 6.65</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>安装python： <blockquote><p>yum install python-setuptools</p></blockquote></li><li>安装wget：<blockquote><p>yum install wget</p></blockquote></li><li>安装pip：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz --no-check-certificate</span><br><span class="line">tar -xzvf pip-1.3.1.tar.gz</span><br><span class="line">cd pip-1.3.1</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></li></ul><p>也可直接使用 easy_install pip</p><a id="more"></a><ul><li>安装shadowsocks <blockquote><p>pip install shadowsocks</p></blockquote></li></ul><h4 id="配置shadowsocks"><a href="#配置shadowsocks" class="headerlink" title="配置shadowsocks"></a>配置shadowsocks</h4><blockquote><p>vi /etc/shadowsocks.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;: 1080,</span><br><span class="line">    &quot;server_port&quot;: 8888,</span><br><span class="line">    &quot;password&quot;: &quot;dsfad&quot;,</span><br><span class="line">    &quot;timeout&quot;: 600,</span><br><span class="line">    &quot;method&quot;: &quot;rc4-md5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><blockquote><p>ssserver -c /etc/shadowsocks.json -d start</p></blockquote><h2 id="ss-与-ssr"><a href="#ss-与-ssr" class="headerlink" title="ss 与 ssr"></a>ss 与 ssr</h2><p>以上我们搭建的是ss（shadowsocks）， 目前ss的作者已经不维护了。 而ssr 是ss的增强版本， 下次搭建科学上网的时候可以考虑使用该工具进行搭建。 搭建方法参考如下链接：</p><p><a href="https://wxnacy.com/2019/02/07/linux-install-ssr/#more" target="_blank" rel="noopener">https://wxnacy.com/2019/02/07/linux-install-ssr/#more</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;centos 6.65&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;安装python： &lt;blockquote&gt;
&lt;p&gt;yum install python-setuptools&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;安装wget：&lt;blockquote&gt;
&lt;p&gt;yum install wget&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;安装pip：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://pypi.python.org/packages/source/p/pip/pip-1.3.1.tar.gz --no-check-certificate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf pip-1.3.1.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd pip-1.3.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python setup.py install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可直接使用 easy_install pip&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.readytran.com/tags/linux/"/>
    
      <category term="工具" scheme="http://blog.readytran.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
